//
//  MockDataGenerator.swift
//  Tracker
//
//  Created by –¢–∏–º—É—Ä –¢–∞–Ω–µ–µ–≤ on 27.08.2023.
//

import CoreData

final class MockDataGenerator {

    private var dataStore: DataStoreProtocol?

    static func setupRecords(with dataProvider: any TrackerDataProviderProtocol) {
        guard let context = dataProvider.dataStore.getContext() else { return }

        let checkRequest = TrackerCoreData.fetchRequest()
        let result = try! context.fetch(checkRequest)
        if result.count > 0 { return }

        struct TrackerRecord {
            let name: String
            let isRegular: Bool
            let emoji: String
            let color: String
            let schedule: String?
            let isPinned: Bool
        }

         let category1 = TrackerCategoryCoreData(context: context)
        category1.categoryID = UUID()
        category1.name = "–ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

        let tracker = TrackerCoreData(context: context)
        tracker.trackerID = UUID()
        tracker.name = "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è"
        tracker.isRegular = true
        tracker.emoji = "üôÖ‚Äç‚ôÇÔ∏è"
        tracker.color = "ypColorSelection-6"
        tracker.schedule = "–ü–Ω,–í—Ç,–°—Ä,–ß—Ç,–ü—Ç"
        tracker.category = category1
        tracker.categoryID = category1.categoryID
        tracker.isPinned = false

        let completed = TrackerRecordCoreData(context: context)
        completed.trackerID = tracker.trackerID
        completed.completedAt = Date().truncated()
        completed.tracker = tracker

        // –∞ —Ç—Ä–µ–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -
        // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç—Ä–µ–∫–µ—Ä–∞–º
        let _ = [
                TrackerRecord(name: "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ 1", isRegular: true, emoji: "üôÇ", color: "ypColorSelection-1", schedule: "–ü–Ω,–°—Ä,–í—Å", isPinned: false),
                TrackerRecord(name: "–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ 1", isRegular: false, emoji: "üôÉ", color: "ypColorSelection-2", schedule: nil, isPinned: true),
                TrackerRecord(name: "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ 2", isRegular: true, emoji: "üòù", color: "ypColorSelection-3", schedule: "–í—Ç,–ü–Ω,–í—Å", isPinned: false)
        ].enumerated().map { index, raw in
                let tracker = TrackerCoreData(context: context)
                tracker.trackerID = UUID()
                tracker.categoryID = category1.categoryID
                tracker.name = raw.name
                tracker.isRegular = raw.isRegular
                tracker.emoji = raw.emoji
                tracker.color = raw.color
                tracker.schedule = raw.schedule
                tracker.category = category1
                tracker.isPinned = raw.isPinned
                return tracker
        }
        try? context.save()

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é 2
        let category2 = TrackerCategoryCoreData(context: context)
        category2.categoryID = UUID()
        category2.name = "–í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—É—Å—Ç–∞—è"

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é 3
        let category3 = TrackerCategoryCoreData(context: context)
        category3.categoryID = UUID()
        category3.name = "–¢—Ä–µ—Ç—å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

        // –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä—ã –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let _ = [
            TrackerRecord(name: "–°–æ–±—ã—Ç–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 1, —Ä–µ–≥—É–ª—è—Ä", isRegular: true, emoji: "ü´∂", color: "ypColorSelection-4", schedule: "–ü–Ω", isPinned: true),
            TrackerRecord(name: "–Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è 3 ", isRegular: false, emoji: "üëç", color: "ypColorSelection-5", schedule: nil, isPinned: false)
        ].enumerated().map { index, raw in
                let tracker = TrackerCoreData(context: context)
                tracker.trackerID = UUID()
                tracker.categoryID = category3.categoryID
                tracker.name = raw.name
                tracker.isRegular = raw.isRegular
                tracker.emoji = raw.emoji
                tracker.color = raw.color
                tracker.schedule = raw.schedule
                tracker.category = category3
                tracker.isPinned = raw.isPinned
                return tracker
        }

        try? context.save()
    }

    static func getDefaultCategory(for dataStore: DataStoreProtocol) -> TrackerCategoryStore? {
        guard let context = dataStore.getContext() else { return nil }
        let request = TrackerCategoryCoreData.fetchRequest()
        if let result = try? context.fetch(request),
           let categoryCoreData = result.first {
            return TrackerCategoryStore(categoryCoreData: categoryCoreData)
        }
        else {
            guard let newCategory = NSEntityDescription.insertNewObject(forEntityName: "TrackerCategoryCoreData", into: context) as? TrackerCategoryCoreData
            else { return nil }

            newCategory.name = "–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            try? context.save()
            return TrackerCategoryStore(categoryCoreData: newCategory)
        }
    }
}
